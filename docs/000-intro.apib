FORMAT: 1A
HOST: https://api.packet.net

# Packet API

This is the API for Packet. Interact with your devices, user account, and
projects.

## Group Versioning

Requesting a specific version of a resource from the Packet API is done via the `Accept` header:

    curl -H 'Accept: application/json; version=1'

Alternatively, if your client doesn't support setting headers (or if you're quickly experimenting), you can set the API version with a parameter in the URL, though the `Accept` header is the preferred method:

    curl https://api.packet.net?version=1

## Group Authentication

Most of the endpoints in the Packet API require authentication. Authenticating
is done with an authentication token in the `X-Auth-Token` header.

    curl -H 'X-Auth-Token: my_authentication_token' https://api.packet.net

Authentication tokens are used to identify the user your application is
connecting to the Packet API on behalf of. Think of authentication tokens as
permanent sessions&mdash;the user creates authentication tokens, and your app
can use them to connect to the Packet API on their behalf until they delete the
token.

Users can create authentication tokens in the [Packet Portal](https://app.packet.net/portal#/api-keys).

## Group Media Types

Generally speaking, the Packet API supports JSON (`application/json`) only.

    curl -H 'Accept: application/json' https://api.packet.net

Some routes may support other media types where appropriate.

Requests that require data to be submitted to the API (`POST`, `PUT` and `PATCH`) may include the data in the request body (if the `Content-Type` header is set to `application/json`) or as form-encoded data.

    curl -H "Content-Type: application/json" -d '{"param":"value"}' https://api.packet.net/devices
    # or
    curl -d 'param=value' https://api.packet.net/devices

## Group Common Parameters

The Packet API uses a few methods to minimize network traffic and bandwidth:

### `include`

For resources that contain collections of other resources, the Packet API will return links to the other resources by default.

    {
      ...
      // Includes "href" links if the resource is reachable through the API.
      "projects": [
        { "href": "https://api.packet.net/projects/5b590e4f-be96-4400-ae32-c315ee67964d" },
        { "href": "https://api.packet.net/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd" }
      ],
      // Includes "id" attributes if not.
      "emails": [
        { "id": "eb5d8c89-4d15-4c87-859c-5ae190ad5d9a" },
        { "id": "c17f77ad-9070-4084-abaa-7538581d9523" }
      ]
      ...
    }

However, if you're interested in acting on resources in the `projects`
collection, it doesn't make sense to make a separate API call to retrieve each
project. Instead, you can specify which collections you'd like to be
included using the `include` parameter.

    /user?include=projects

will return

    {
      ...
      "projects": [
        {
          "href": "https://api.packet.net/projects/c851d3c5-d55d-4b1a-99f1-96fc64768bc3",
          "id": "c851d3c5-d55d-4b1a-99f1-96fc64768bc3",
          "name": "Project 1",
          ...
        },
        {
          "href": "https://api.packet.net/projects/21f8e88b-bd4e-44ca-b956-4f3f88e6e5f2",
          "id": "21f8e88b-bd4e-44ca-b956-4f3f88e6e5f2",
          "name": "Project 2",
          ...
        }
      ],
      ...
    }

The `include` parameter is accepted for all `GET` requests on all resources and
collections, and should be specified as a comma-separated list.

    /user?include=emails,projects,memberships

You may also include nested associations up to 3 levels deep using dot notation:

    /user?include=memberships.projects

## Group Errors

The common [HTTP Response Status Codes](http://httpstatus.es) are used. You
know the drill.
