FORMAT: 1A
HOST: https://api.packethost.net/v1

# Packet API

This is the API for Packet. Interact with your devices, user account, and
organizations.

## Group Authentication

There are no "public" methods in the Packet API; all API methods require
authentication. Authenticating with the Packet API consists of two parts:

1. An application token (contained in the `X-Consumer-Token` header)
2. A user authentication token (container in the `X-Auth-Token` header)

Application tokens are used to identify each application that has permission
to connect to the Packet API. You may create new applications in the Packet
Portal.

Authentication tokens are used to identify the user your application is
connecting to the Packet API on behalf of. Think of authentication tokens as
permanent sessions&mdash;the user creates authentication tokens, and your app
can use them to connect to the Packet API on their behalf until they delete the
token.

## Group Media Types

Generally speaking, the Packet API supports JSON (`application/json`) only.

    curl -H 'Accept: application/json' https://api.packethost.net

Some routes, may support other media types where appropriate. For example, `GET /devices/:id/metadata` supports returning the device's metadata as a [cloud-init][cloud-init]-compatible YAML file:

    curl -H 'Accept: application/x-yaml' https://api.packet.net/devices/d402405b-d805-471d-bc16-99d6aa2e4ac3/metadata

[cloud-init]: http://cloudinit.readthedocs.org/en/latest/index.html

Requests that require data to be submitted to the API (`POST`, `PUT` and `PATCH`) may include the data in the request body (if the `Content-Type` header is set to `application/json`) or as form-encoded data.

    curl -H "Content-Type: application/json" -d '{"param":"value"}' https://api.packethost.net/devices
    # or
    curl -d 'param=value' https://api.packethost.net/devices

## Group Common Parameters

The Packet API uses a few methods to minimize network traffic and bandwidth:

### `include`

For resources that contain collections of other resources, the Packet API will return links to the other resources by default.

    {
      ...
      // Includes "href" links if the resource is reachable through the API.
      "projects": [
        { "href": "https://api.packethost.net/projects/5b590e4f-be96-4400-ae32-c315ee67964d" },
        { "href": "https://api.packethost.net/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd" }
      ],
      // Includes "id" attributes if not.
      "emails": [
        { "id": "eb5d8c89-4d15-4c87-859c-5ae190ad5d9a" },
        { "id": "c17f77ad-9070-4084-abaa-7538581d9523" }
      ]
      ...
    }

However, if you're interested in acting on resources in the `organizations`
collection, it doesn't make sense to make a separate API call to retrieve each
organization. Instead, you can specify which collections you'd like to be
included using the `include` parameter.

    /user?include=projects

will return

    {
      ...
      "projects": [
        {
          "href": "https://api.packethost.net/projects/c851d3c5-d55d-4b1a-99f1-96fc64768bc3",
          "id": "c851d3c5-d55d-4b1a-99f1-96fc64768bc3",
          "name": "Project 1",
          ...
        },
        {
          "href": "https://api.packethost.net/projects/21f8e88b-bd4e-44ca-b956-4f3f88e6e5f2",
          "id": "21f8e88b-bd4e-44ca-b956-4f3f88e6e5f2",
          "name": "Project 2",
          ...
        }
      ],
      ...
    }

The `include` parameter is accepted for all `GET` requests on all resources and
collections, and should be specified as a comma-separated list.

    /user?include=emails,projects,memberships

You may also include nested associations up to 3 levels deep using dot notation:

    /user?include=memberships.projects

## Group Errors

The common [HTTP Response Status Codes](http://httpstatus.es) are used. You
know the drill.
